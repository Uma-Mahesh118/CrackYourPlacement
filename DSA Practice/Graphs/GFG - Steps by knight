class Solution {
public:
    int minStepToReachTarget(vector<int>& st, vector<int>& tar, int n) {
        vector<vector<int>> moves = {{1, 2}, {2, 1}, {-1, 2}, {-2, 1}, {-1, -2}, {-2, -1}, {1, -2}, {2, -1}};
        vector<vector<int>> vis(n, vector<int>(n, 0));
        queue<pair<pair<int, int>, int>> q;
        q.push({{st[0], st[1]}, 0});
        vis[st[0] - 1][st[1] - 1] = 1;
        
        while (!q.empty()) {
            auto curr = q.front();
            q.pop();
            int row = curr.first.first, col = curr.first.second;
            int steps = curr.second;
            if (row == tar[0] && col == tar[1]) return steps;
            for (auto& move : moves) {
                int newRow = row + move[0];
                int newCol = col + move[1];
                if (newRow > 0 && newRow <= n && newCol > 0 && newCol <= n && !vis[newRow - 1][newCol - 1]) {
                    vis[newRow - 1][newCol - 1] = 1; 
                    q.push({{newRow, newCol}, steps + 1}); 
                }
            }
        }
        return -1;
    }
};
